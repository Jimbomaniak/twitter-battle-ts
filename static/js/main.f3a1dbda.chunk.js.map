{"version":3,"sources":["utils/index.ts","components/Loading/index.tsx","components/Popular/index.tsx","components/Nav/index.tsx","components/Home/index.tsx","components/Battle/PlayerPreview/index.tsx","components/Battle/index.tsx","components/Battle/Results/index.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["params","concat","url","getRepos","username","axios","get","calculateScore","profile","repos","followers","data","reduce","count","repo","stargazers_count","getStarCount","handleError","error","console","warn","getUserData","player","all","then","user","score","sortPlayers","players","sort","a","b","api","battle","map","catch","fetchPopularRepos","language","SEARCHURL","encodedURI","window","encodeURI","resp","items","content","textAlign","fontSize","Loading","interval","state","text","_this","props","_this2","this","stopper","setInterval","setState","prevState","speed","clearInterval","react_default","createElement","style","Component","defaultProps","LANGUAGES","SelectLanguage","className","lang","selectedLanguage","color","undefined","onClick","onSelect","bind","key","RepoGrid","index","name","href","html_url","target","src","owner","avatar_url","alt","login","Popular","updateLanguage","log","_this$state","Popular_SelectLanguage","Popular_RepoGrid","components_Loading","NavBar","NavLink","exact","activeClassName","to","Home","Link","PlayerPreview","userurl","avatar","children","PlayerInput","handleChange","_ref","value","handleSubmit","event","preventDefault","onSubmit","id","htmlFor","label","placeholder","type","autoComplete","onChange","disabled","Battle","playerOneName","playerTwoName","playerOneImage","playerTwoImage","handleReset","match","Battle_PlayerInput","Battle_PlayerPreview","pathname","search","Profile","_props$info","info","location","company","following","public_repos","blog","Player","Results_Profile","Results","winner","loser","loading","qs","parse","slice","results","Results_Player","App","BrowserRouter","Nav","Switch","Route","path","component","render","Boolean","hostname","ReactDOM","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3a1dbda.chunk.js","sourcesContent":["import axios from 'axios';\nimport { IProfile } from '../components/Battle/Results'\n\nconst id = '85765946457c8c2c2885';\nconst sec = '9a4ad3b170b6b727802fe674c230198bb39bf0fe';\nconst params = `?client_id=${id}&client_secret=${sec}`;\nconst url = 'https://api.github.com/users/'\n\ninterface Repo {\n  stargazers_count: number\n}\n\ninterface Repos {\n  data: Repo[],\n}\n\ninterface Profile {\n  followers: number\n}\n\nexport interface IPlayer {\n  score: number,\n  profile: IProfile\n}\n\nconst getProfile = (username: string) =>\n  axios.get(`${url}${username + params}`)\n    .then((user) => user.data);\n\n\nconst getRepos = (username: string) =>\n  axios.get(`${url}${username}/repos${params}&per_page=100`)\n\n\nconst getStarCount  = (repos: Repos) => \n  repos.data.reduce((count: number, repo) => count + repo.stargazers_count, 0)\n\n\nconst calculateScore = (profile: Profile, repos: Repos) => {\n  const followers = profile.followers;\n  const totalStars = getStarCount(repos);\n\n  return (followers * 3) + totalStars;\n}\n\nconst handleError = (error: Error) => {\n  console.warn(error);\n  return null;\n}\n\nconst getUserData = (player: string) =>\n axios.all([\n    getProfile(player),\n    getRepos(player)\n  ]).then((data) => {\n    const profile = data[0];\n    const repos = data[1];\n\n    return {\n      profile,\n      score: calculateScore(profile, repos)\n    }\n  })\n\n\nconst sortPlayers = (players: IPlayer[]) =>\n  players.sort((a,b) => b.score - a.score)\n\nexport const api = {\n  battle: (players: string[]) => \n    axios.all(players.map(getUserData))\n      .then(sortPlayers)\n      .catch(handleError)\n  ,\n  fetchPopularRepos: (language: string) => {\n    const SEARCHURL = 'https://api.github.com/search/repositories?q=stars:>1+language:'+\n      language + '&sort=stars&order=desc&type=Repositories';\n    const encodedURI = (window as any).encodeURI(SEARCHURL);\n\n    return axios.get(encodedURI)\n      .then(resp => resp.data.items)\n  }\n};\n\n\n\n\n","import React, { Component, CSSProperties } from 'react';\n\nconst content: CSSProperties = {\n    textAlign: 'center',\n    fontSize: '35px'\n};\n\ninterface LoadingState {\n  text: string;\n}\n\ninterface LoadingProps {\n  speed: number;\n  text: string;\n}\n\nclass Loading extends Component<LoadingProps, LoadingState> {\n  static defaultProps = {\n    text: 'Loading',\n    speed: 300\n  }\n  public interval: number = 0;\n  state = {\n    text: this.props.text\n  };\n\n  componentDidMount() {\n    const stopper = `${this.props.text}...`;\n    this.interval = window.setInterval(() => {\n      if (this.state.text === stopper) {\n        this.setState({ text: this.props.text });\n      } else {\n        this.setState(prevState => {\n          return { text: prevState.text + '.' };\n        });\n      }\n    }, this.props.speed);\n  }\n\n  componentWillUnmount() {\n    window.clearInterval(this.interval);\n  }\n  render() {\n    return <p style={content}>{this.state.text}</p>;\n  }\n}\n\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { api } from '../../utils';\nimport Loading from '../Loading';\n\nconst LANGUAGES = ['All', 'Javascript', 'Ruby', 'Java', 'CSS', 'Python'];\n\ninterface SelectLanguageProps {\n  selectedLanguage: string;\n  onSelect(lang: string): void;\n}\n\ninterface IOwner {\n  avatar_url: string;\n  login: string;\n}\n\ninterface IRepo {\n  name: string;\n  html_url: string;\n  owner: IOwner;\n  stargazers_count: string;\n}\n\ninterface RepoGridProps {\n  repos: IRepo[];\n}\n\ninterface PopularState {\n  selectedLanguage: string,\n  repos: IRepo[]\n}\n\nconst SelectLanguage = (props: SelectLanguageProps) => (\n  <ul className=\"languages\">\n    {LANGUAGES.map(lang => (\n      <li\n        style={\n          lang === props.selectedLanguage ? { color: '#d0021b' } : undefined\n        }\n        onClick={props.onSelect.bind(null, lang)}\n        key={lang}>\n        {lang}\n      </li>\n    ))}\n  </ul>\n);\n\nconst RepoGrid = (props: RepoGridProps) => (\n  <ul className=\"popular-list\">\n    {props.repos.map((repo, index) => {\n      return (\n        <li key={repo.name} className=\"popular-item\">\n          <div className=\"popular-rank\"> #{index + 1}</div>\n          <ul className=\"space-list-items\">\n            <li>\n              <a href={repo.html_url} target=\"_blank\">\n                <img\n                  className=\"avatar\"\n                  src={repo.owner.avatar_url}\n                  alt={`Avatar for ${repo.owner.login}`}\n                />\n              </a>\n            </li>\n            <li>\n              <a href={repo.html_url}>{repo.name}</a>\n            </li>\n            <li>@{repo.owner.login}</li>\n            <li>{repo.stargazers_count} stars</li>\n          </ul>\n        </li>\n      );\n    })}\n  </ul>\n);\n\n\nclass Popular extends Component<PopularState> {\n  state = {\n    selectedLanguage: 'All',\n    repos: null\n  };\n\n  componentDidMount() {\n    console.log('------', 'mount');\n    this.updateLanguage(this.state.selectedLanguage);\n  }\n\n  updateLanguage = (lang: string) => {\n    this.setState({\n      selectedLanguage: lang,\n      repos: null\n    });\n\n    api.fetchPopularRepos(lang).then(repos => this.setState({ repos }));\n  };\n\n  render() {\n    const { selectedLanguage, repos } = this.state;\n    return (\n      <div className=\"popular\">\n        <SelectLanguage\n          selectedLanguage={selectedLanguage}\n          onSelect={this.updateLanguage}\n        />\n        {!repos ? (\n          <Loading text=\"Downloading\" />\n        ) : (\n          <RepoGrid repos={repos} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Popular;\n","import React from 'react';\nimport {NavLink} from 'react-router-dom';\n\n\nconst NavBar = () => (\n    <ul className='nav'>\n      <li>\n        <NavLink exact activeClassName='active' to='/TwitterBattle'>\n          Home\n        </NavLink>\n      </li>\n      <li>\n        <NavLink activeClassName='active' to={'/TwitterBattle/battle'}>\n          Battle\n        </NavLink>\n      </li>\n      <li>\n        <NavLink activeClassName='active' to={'/TwitterBattle/popular'}>\n          Popular\n        </NavLink>\n      </li>\n    </ul>\n  )\n\nexport default NavBar","import React, { Component } from 'react'\nimport {Link} from 'react-router-dom'\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className='home-container'>\n        <h1>Github Battle: Battle your friends... and stuff.</h1>\n\n\n        <Link className='button' to='/TwitterBattle/battle'>\n          Battle\n        </Link>\n      </div>\n    )\n  }\n}\n\nexport default Home","import React, { ReactNode } from 'react';\n\ninterface PlayerPreviewProps {\n  avatar: string;\n  username: string;\n  userurl: string;\n  children: ReactNode;\n  id?: string;\n}\n\nconst PlayerPreview = (props: PlayerPreviewProps) => (\n  <div>\n    <div className=\"column\">\n      <a href={props.userurl} target=\"_blank\">\n        <img\n          className=\"avatar\"\n          src={props.avatar}\n          alt={`Avatar for ${props.username}`}\n        />\n      </a>\n      <h2 className=\"username\">{`@${props.username}`}</h2>\n    </div>\n    {props.children}\n  </div>\n);\n\nexport default PlayerPreview;\n","import React, { Component, FormEvent } from 'react';\nimport { Link } from 'react-router-dom';\nimport PlayerPreview from './PlayerPreview';\n\ninterface PlayerInputProps {\n  id: 'playerOne' | 'playerTwo';\n  label: string;\n  onSubmit(id: string, username: string): void;\n}\n\ninterface PlayerInputState {\n  username: string;\n}\n\ninterface IValue {\n  value: string;\n}\n\ninterface ITarget {\n  target: IValue;\n}\n\ninterface IMatch {\n  url: string;\n}\n\ninterface BattleProps {\n  match: IMatch;\n}\n\ninterface BattleState {\n  playerOneName: string;\n  playerTwoName: string;\n  playerOneImage: string;\n  playerTwoImage: string;\n}\n\nclass PlayerInput extends Component<PlayerInputProps, PlayerInputState> {\n  state = {\n    username: ''\n  };\n\n  handleChange = ({ target }: ITarget) => {\n    this.setState({ username: target.value });\n  };\n\n  handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    this.props.onSubmit(this.props.id, this.state.username);\n  };\n\n  render() {\n    return (\n      <form className=\"column\" onSubmit={this.handleSubmit}>\n        <label className=\"header\" htmlFor=\"username\">\n          {this.props.label}\n        </label>\n        <input\n          id=\"username\"\n          placeholder=\"github username\"\n          type=\"text\"\n          autoComplete=\"off\"\n          value={this.state.username}\n          onChange={this.handleChange}\n        />\n        <button\n          className=\"button\"\n          type=\"submit\"\n          disabled={!this.state.username}>\n          Submit\n        </button>\n      </form>\n    );\n  }\n}\n\nclass Battle extends Component<BattleProps, BattleState> {\n  state = {\n    playerOneName: '',\n    playerTwoName: '',\n    playerOneImage: '',\n    playerTwoImage: ''\n  };\n\n  handleSubmit = (id: 'playerOne' | 'playerTwo', username: string) => {\n    if (id === 'playerOne') {\n      this.setState({\n        playerOneName: username,\n        playerOneImage: `https://github.com/${username}.png?size=200`\n      });\n    } else {\n      this.setState({\n        playerTwoName: username,\n        playerTwoImage: `https://github.com/${username}.png?size=200`\n      });\n    }\n  };\n\n  handleReset = (id: 'playerOne' | 'playerTwo') => {\n    if (id === 'playerOne') {\n      this.setState({\n        playerOneName: '',\n        playerOneImage: ''\n      });\n    } else {\n      this.setState({\n        playerTwoName: '',\n        playerTwoImage: ''\n      });\n    }\n  };\n\n  render() {\n    const { match } = this.props;\n    const {\n      playerOneName,\n      playerTwoName,\n      playerOneImage,\n      playerTwoImage\n    } = this.state;\n\n    return (\n      <div className=\"players\">\n        <div className=\"row\">\n          {!playerOneName && (\n            <PlayerInput\n              id=\"playerOne\"\n              label=\"Player One\"\n              onSubmit={this.handleSubmit}\n            />\n          )}\n\n          {!!playerOneImage && (\n            <PlayerPreview\n              avatar={playerOneImage}\n              username={playerOneName}\n              id=\"playerOne\"\n              userurl={`https://github.com/${playerOneName}`}>\n              <button\n                className=\"reset\"\n                onClick={this.handleReset.bind(null, 'playerOne')}>\n                Reset\n              </button>\n            </PlayerPreview>\n          )}\n\n          {!playerTwoName && (\n            <PlayerInput\n              id=\"playerTwo\"\n              label=\"Player Two\"\n              onSubmit={this.handleSubmit}\n            />\n          )}\n\n          {!!playerTwoImage && (\n            <PlayerPreview\n              avatar={playerTwoImage}\n              username={playerTwoName}\n              id=\"playerTwo\"\n              userurl={`https://github.com/${playerTwoName}`}>\n              <button\n                className=\"reset\"\n                onClick={this.handleReset.bind(null, 'playerTwo')}>\n                Reset\n              </button>\n            </PlayerPreview>\n          )}\n        </div>\n        {playerOneImage && playerTwoImage && (\n          <Link\n            className=\"button\"\n            to={{\n              pathname: `${match.url}/results`,\n              search: `?playerOneName=${playerOneName}&playerTwoName=${playerTwoName}`\n            }}>\n            Battle\n          </Link>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Battle;\n","import React, { Component } from 'react';\nimport qs from 'qs';\nimport { api } from '../../../utils/';\nimport { Link } from 'react-router-dom';\nimport PlayerPreview from '../PlayerPreview';\nimport Loading from '../../Loading';\n\ninterface IInfo<T> {\n  avatar_url: T;\n  login: T;\n  html_url: T;\n  name: T;\n  location: T;\n  company: T;\n  followers: T;\n  following: T;\n  public_repos: T;\n  blog: T;\n}\n\ninterface ProfileProps {\n  info: IInfo<string>;\n}\n\ninterface PlayerProps {\n  label: string;\n  score: number;\n  profile: IInfo<string>;\n}\n\ninterface ILocation {\n  search: string;\n}\n\nexport interface IProfile {\n  profile: IInfo<string>;\n}\n\ninterface ResultsProps {\n  location: ILocation;\n}\n\ninterface IPlayer {\n  score: number;\n  profile: IProfile;\n}\n\ninterface ResultsState {\n  winner: null | IPlayer;\n  loser: null | IPlayer;\n  error: null | string;\n  loading: boolean;\n}\n\nconst Profile = (props: ProfileProps) => {\n  const {\n    avatar_url,\n    login,\n    html_url,\n    name,\n    location,\n    company,\n    followers,\n    following,\n    public_repos,\n    blog\n  } = props.info;\n\n  return (\n    <PlayerPreview avatar={avatar_url} username={login} userurl={html_url}>\n      <ul className=\"space-list-items\">\n        {name && <li>{name}</li>}\n        {location && <li>{location}</li>}\n        {company && <li>{company}</li>}\n        <li>Followers: {followers}</li>\n        <li>Following: {following}</li>\n        <li>Public Repos: {public_repos}</li>\n        {blog && (\n          <li>\n            <a href={blog}>{blog}</a>\n          </li>\n        )}\n      </ul>\n    </PlayerPreview>\n  );\n};\n\nconst Player = (props: PlayerProps) => (\n  <div>\n    <h1 className=\"header\"> {props.label}</h1>\n    {props.score && (\n      <h3 style={{ textAlign: 'center' }}>Score: {props.score}</h3>\n    )}\n    {props.profile && <Profile info={props.profile} />}\n  </div>\n);\n\nclass Results extends Component<ResultsProps, ResultsState> {\n  state = {\n    winner: null,\n    loser: null,\n    error: null,\n    loading: true\n  };\n\n  componentDidMount() {\n    const players = qs.parse(this.props.location.search.slice(1));\n    api.battle([players.playerOneName, players.playerTwoName]).then(results => {\n      if (results === null) {\n        return this.setState({\n          error:\n            'Looks like there was error. Check that both users exist on GitHub',\n          loading: false\n        });\n      }\n      this.setState({\n        error: null,\n        winner: results[0],\n        loser: results[1],\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const { error, winner, loser, loading } = this.state;\n\n    if (loading === true) {\n      return <Loading />;\n    }\n\n    if (error) {\n      return (\n        <div>\n          <p>{error}</p>\n          <Link to=\"TwitterBattle/battle\">Reset</Link>\n        </div>\n      );\n    }\n    if (!winner || !loser) {\n      return (\n        <div>\n          <p> No data </p>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"players\">\n        <div className=\"row\">\n          <Player\n            label=\"Winner\"\n            score={(winner as any).score}\n            profile={(winner as any).profile}\n          />\n          <Player label=\"Loser\" score={(loser as any).score} profile={(loser as any).profile} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","import React, { Component } from 'react';\nimport './App.sass';\nimport Popular from './Popular';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport NavBar from './Nav'\nimport Home from './Home'\nimport Battle from './Battle'\nimport Results from \"./Battle/Results\";\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"container\">\n          <NavBar/>\n          <Switch>\n            <Route exact path='/TwitterBattle' component={Home} />\n            <Route exact path='/TwitterBattle/battle' component={Battle} />\n            <Route path='/TwitterBattle/battle/results' component={Results} />\n            <Route path='/TwitterBattle/popular' component={Popular} />\n            <Route render={() => <p>Not Found</p>} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}